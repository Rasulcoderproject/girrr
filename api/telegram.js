const fetch = require("node-fetch");
const cheerio = require("cheerio");

const sessions = {};

module.exports = async (req, res) => {
  if (req.method !== "POST") return res.status(405).send("Method Not Allowed");

  const token = process.env.TELEGRAM_BOT_TOKEN;
  const body = req.body;
  const msg = body.message || body.callback_query?.message;
  const text = body.message?.text;
  const callbackData = body.callback_query?.data;
  const chat_id = msg?.chat?.id;

  const sendMessage = (text, keyboard = null) => {
    return fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id,
        text,
        reply_markup: keyboard ? { inline_keyboard: keyboard } : undefined,
      }),
    });
  };

  if (!chat_id) return res.status(200).send("No chat_id");

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  if (text === "/start") {
    sessions[chat_id] = { step: null };
    await sendMessage("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏.", [
      [{ text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", callback_data: "check_status" }]
    ]);
    return res.status(200).send("OK");
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
  if (callbackData === "check_status") {
    sessions[chat_id] = { step: "ask_application" };
    await sendMessage("üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: UZB-10838/25):");
    return res.status(200).send("OK");
  }

  const session = sessions[chat_id];

  if (session?.step === "ask_application") {
    if (!/^UZB-\d+\/\d+$/.test(text)) {
      await sendMessage("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: UZB-10838/25");
      return res.status(200).send("OK");
    }

    session.applicationNumber = text;
    session.step = "ask_email";
    await sendMessage("‚úâÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:");
    return res.status(200).send("OK");
  }

  if (session?.step === "ask_email") {
    if (!/^\S+@\S+\.\S+$/.test(text)) {
      await sendMessage("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü—Ä–∏–º–µ—Ä: example@gmail.com");
      return res.status(200).send("OK");
    }

    session.email = text;
    session.step = "checking";
    await sendMessage("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏...");

    const { applicationNumber, email } = session;
    const url = `https://russia-edu.minobrnauki.gov.ru/application-status?number=${encodeURIComponent(applicationNumber)}&email=${encodeURIComponent(email)}`;

    try {
      const response = await fetch(url);
      const html = await response.text();
      const $ = cheerio.load(html);

      const status = $("#status").text().trim() || "‚ùó –°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.";
      await sendMessage(`üìÑ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:\n${status}`);
    } catch (err) {
      await sendMessage("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }

    delete sessions[chat_id];
    return res.status(200).send("OK");
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã
  await sendMessage("‚ùì –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.");
  return res.status(200).send("OK");
};

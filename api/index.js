const fetch = require("node-fetch");
const cheerio = require("cheerio");

async function getApplicationStatus(appNumber, email) {

  const url = `https://russia-edu.minobrnauki.gov.ru/application-status?number=${appNumber}&email=${email}`;
  const resp = await fetch(url);
  const html = await resp.text();
  const $ = cheerio.load(html);

  const status = $("#status").text().trim() || "–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";
  return status;
}

module.exports = async (req, res) => {
  if (req.method !== "POST") {
    res.status(405).send("Method Not Allowed");
    return;
  }

  const body = req.body;
  const token = process.env.TELEGRAM_BOT_TOKEN;

  const sendMessage = (chat_id, text, options = {}) =>
    fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ chat_id, text, reply_markup: options }),
    });

  const from = body.callback_query?.from;
  const chat_id = body.message?.chat?.id || body.callback_query?.message?.chat?.id;
  const text = body.message?.text;

  if (body.callback_query) {
    await sendMessage(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏ email —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: UZB-123456 email@example.com):");
    return res.status(200).json({ ok: true });
  }

  if (text === "/start") {
    const keyboard = { inline_keyboard: [[{ text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data: "check_application" }]] };
    await sendMessage(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard);
    return res.status(200).json({ ok: true });
  }

  const parts = text.split(" ");
  if (parts.length === 2 && /^\d{5,}$/.test(parts[0]) && /\S+@\S+\.\S+/.test(parts[1])) {
    const [appNumber, email] = parts;
    await sendMessage(chat_id, `üîé –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞—è–≤–∫—É ‚Ññ${appNumber}...`);
    const status = await getApplicationStatus(appNumber, email);
    await sendMessage(chat_id, `üìÑ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ‚Ññ${appNumber}:\n${status}`);
    return res.status(200).json({ ok: true });
  }

  await sendMessage(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `<–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏> <email>`");
  res.status(200).json({ ok: true });
};

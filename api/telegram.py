import os
import json
import re
import httpx
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse

app = FastAPI()

# --- –ü–∞–º—è—Ç—å ---
sessions = {}
feed = {}
stats = {}
feedback_sessions = {}

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "")
OWNER_ID = str(os.getenv("MY_TELEGRAM_ID", ""))
TELEGRAM_SEND_MAX = 3900

# ---- –£—Ç–∏–ª–∏—Ç—ã ----
async def read_raw_body(req: Request):
    return await req.body()

def chunk_string(s: str, size=TELEGRAM_SEND_MAX):
    return [s[i:i + size] for i in range(0, len(s), size)]

def safe_json(obj):
    try:
        return json.dumps(obj, indent=2, ensure_ascii=False)
    except Exception:
        return str(obj)

# ---- Telegram API ----
async def send_message(chat_id, text, reply_markup=None, parse_mode="Markdown"):
    payload = {"chat_id": str(chat_id), "text": str(text)}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    if parse_mode:
        payload["parse_mode"] = parse_mode
    async with httpx.AsyncClient() as client:
        try:
            await client.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", json=payload)
        except Exception as e:
            print("send_message error:", e)

async def answer_callback_query(callback_query_id):
    async with httpx.AsyncClient() as client:
        try:
            await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery",
                json={"callback_query_id": callback_query_id},
            )
        except Exception as e:
            print("answer_callback_query error:", e)

# ---- GPT —á–µ—Ä–µ–∑ OpenRouter ----
async def ask_gpt(prompt):
    if not OPENROUTER_API_KEY:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç OPENROUTER_API_KEY"
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            res = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "openai/gpt-3.5-turbo",
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": 0.7,
                },
            )
            data = await res.json()
            print("GPT response data:", data)  # –¥–µ–±–∞–≥
            choices = data.get("choices")
            if choices and len(choices) > 0:
                message = choices[0].get("message")
                if message:
                    return message.get("content", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
    except Exception as e:
        print("ask_gpt error:", e)
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."

# ---- Webhook ----
@app.post("/api/telegram")
async def telegram_webhook(req: Request):
    raw = await read_raw_body(req)
    try:
        update = json.loads(raw)
    except Exception as e:
        print("Bad JSON:", e)
        return PlainTextResponse("Bad JSON", status_code=400)

    chat_id = (
        update.get("message", {}).get("chat", {}).get("id") or
        update.get("edited_message", {}).get("chat", {}).get("id") or
        update.get("callback_query", {}).get("message", {}).get("chat", {}).get("id")
    )
    if not chat_id:
        return PlainTextResponse("ok")

    chat_id_str = str(chat_id)
    first_name = (
        update.get("message", {}).get("from", {}).get("first_name") or
        update.get("edited_message", {}).get("from", {}).get("first_name") or
        update.get("callback_query", {}).get("from", {}).get("first_name") or
        ""
    )

    text = (
        update.get("message", {}).get("text") or
        update.get("edited_message", {}).get("text") or
        update.get("callback_query", {}).get("data") or
        ""
    )

    if update.get("callback_query"):
        try:
            await answer_callback_query(update["callback_query"]["id"])
        except:
            pass

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if update.get("message", {}).get("contact"):
        contact = update["message"]["contact"]
        await send_message(chat_id_str, f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä: +{contact['phone_number']}")
        await send_message(
            OWNER_ID,
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç:\n–ò–º—è: {contact['first_name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: +{contact['phone_number']}\nID: {contact['user_id']}"
        )
        return PlainTextResponse("ok")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    try:
        await process_game_logic(chat_id_str, str(text or ""), first_name)
    except Exception as e:
        print("process_game_logic error:", e)

    return PlainTextResponse("ok")


# ---- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ----
async def process_game_logic(chat_id, text, first_name):
    session = sessions.get(chat_id, {})

    def update_local_stats(game, win):
        if chat_id not in stats:
            stats[chat_id] = {}
        if game not in stats[chat_id]:
            stats[chat_id][game] = {"played": 0, "wins": 0}
        stats[chat_id][game]["played"] += 1
        if win:
            stats[chat_id][game]["wins"] += 1

    # --- /start ---
    if text == "/start":
        sessions[chat_id] = {"firstName": first_name}
        await send_message(chat_id, f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name or '–¥—Ä—É–≥'}! –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–ª–∏ —Ç–µ—Å—Ç:", {
            "keyboard": [
                [{"text": "–ò—Å—Ç–æ—Ä–∏—è"}, {"text": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"}],
                [{"text": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"}, {"text": "–ò–≥—Ä—ã üé≤"}],
                [{"text": "/feedback"}, {"text": "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", "request_contact": True}],
            ],
            "resize_keyboard": True
        })
        return

    # --- –ò–≥—Ä—ã –º–µ–Ω—é ---
    if text == "–ò–≥—Ä—ã üé≤":
        await send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", {
            "keyboard": [
                [{"text": "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"}, {"text": "–ù–∞–π–¥–∏ –ª–æ–∂—å"}],
                [{"text": "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é"}, {"text": "–®–∞—Ä–∞–¥–∞"}],
                [{"text": "/start"}, {"text": "/stats"}]
            ],
            "resize_keyboard": True
        })
        return

    # ===== –ù–∞–π–¥–∏ –ª–æ–∂—å =====
    if text == "–ù–∞–π–¥–∏ –ª–æ–∂—å":
        prompt = """–ü—Ä–∏–¥—É–º–∞–π —Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –î–≤–∞ –ø—Ä–∞–≤–¥–∏–≤—ã—Ö, –æ–¥–Ω–æ –ª–æ–∂–Ω–æ–µ. –í –∫–æ–Ω—Ü–µ —É–∫–∞–∂–∏, –∫–∞–∫–æ–µ –∏–∑ –Ω–∏—Ö –ª–æ–∂—å. –§–æ—Ä–º–∞—Ç:
1. ...
2. ...
3. ...
–õ–æ–∂—å: ‚Ññ..."""
        reply = await ask_gpt(prompt)
        print("GPT reply (–ù–∞–π–¥–∏ –ª–æ–∂—å):", reply)
        match = re.search(r"(?:–õ–æ–∂—å|Lie)[:\s\-]*#?(\d)", reply, re.IGNORECASE)
        false_index = match.group(1) if match else None
        if not false_index:
            await send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return
        statement_text = re.sub(r"(?:–õ–æ–∂—å|Lie)[:\s\-]*#?\d", "", reply, flags=re.IGNORECASE).strip()
        sessions[chat_id] = {"game": "–ù–∞–π–¥–∏ –ª–æ–∂—å", "answer": false_index, "question_text": statement_text}
        await send_message(chat_id, f"üïµÔ∏è –ù–∞–π–¥–∏ –ª–æ–∂—å:\n\n{statement_text}\n\n–û—Ç–≤–µ—Ç –≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–æ–π (1, 2 –∏–ª–∏ 3).")
        return

    if session.get("game") == "–ù–∞–π–¥–∏ –ª–æ–∂—å":
        guess = text.strip()
        correct = session["answer"]
        win = guess == correct
        update_local_stats("–ù–∞–π–¥–∏ –ª–æ–∂—å", win)
        reply_text = "üéâ –í–µ—Ä–Ω–æ! –¢—ã –Ω–∞—à—ë–ª –ª–æ–∂—å!" if win else f"‚ùå –ù–µ—Ç, –ª–æ–∂—å –±—ã–ª–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {correct}."
        sessions.pop(chat_id)
        await send_message(chat_id, reply_text)
        return

    # ===== –ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é =====
    if text == "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é":
        prompt = """–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç—Ä–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è. –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–Ω—É–º–µ—Ä—É–π. –§–æ—Ä–º–∞—Ç:
–ù–∞—á–∞–ª–æ: ...
1. ...
2. ...
3. ..."""
        reply = await ask_gpt(prompt)
        print("GPT reply (–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é):", reply)
        sessions[chat_id] = {"game": "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é", "story": reply}
        await send_message(chat_id, f"üìñ –ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é:\n\n{reply}\n\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (1, 2 –∏–ª–∏ 3).")
        return

    if session.get("game") == "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é":
        choice = text.strip()
        win = choice in ["1", "2", "3"]
        update_local_stats("–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é", win)
        sessions.pop(chat_id)
        await send_message(chat_id, "üéâ –ö–ª–∞—Å—Å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ!" if win else "‚ùå –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # ===== –®–∞—Ä–∞–¥–∞ =====
    if text == "–®–∞—Ä–∞–¥–∞":
        prompt = """–ü—Ä–∏–¥—É–º–∞–π —à–∞—Ä–∞–¥—É –∏–∑ —Ç—Ä—ë—Ö —á–∞—Å—Ç–µ–π. –í –∫–æ–Ω—Ü–µ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç. –§–æ—Ä–º–∞—Ç:
1) ...
2) ...
3) ...
–û—Ç–≤–µ—Ç: ..."""
        reply = await ask_gpt(prompt)
        print("GPT reply (–®–∞—Ä–∞–¥–∞):", reply)
        match = re.search(r"–û—Ç–≤–µ—Ç[:\s\-]*(.+)", reply, re.IGNORECASE)
        answer = match.group(1).strip().upper() if match else None
        if not answer:
            await send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞—Ä–∞–¥—É.")
            return
        riddle_text = re.sub(r"–û—Ç–≤–µ—Ç[:\s\-]*.+", "", reply, flags=re.IGNORECASE).strip()
        sessions[chat_id] = {"game": "–®–∞—Ä–∞–¥–∞", "answer": answer, "riddle_text": riddle_text}
        await send_message(chat_id, f"üß© –®–∞—Ä–∞–¥–∞:\n\n{riddle_text}\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.")
        return

    if session.get("game") == "–®–∞—Ä–∞–¥–∞":
        guess = text.strip().upper()
        correct = session["answer"]
        win = guess == correct
        update_local_stats("–®–∞—Ä–∞–¥–∞", win)
        sessions.pop(chat_id)
        await send_message(chat_id, "üéâ –í–µ—Ä–Ω–æ!" if win else f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û—Ç–≤–µ—Ç: {correct}")
        return

    # --- –§–æ–ª–ª–±–µ–∫ ---
    await send_message(chat_id, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")

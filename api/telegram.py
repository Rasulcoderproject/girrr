import os
import json
import re
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
import httpx

app = FastAPI()

# --- –í –ø–∞–º—è—Ç–∏ ---
sessions = {}
feed = {}
stats = {}
feedback_sessions = {}

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY") or ""
OWNER_ID = str(os.getenv("MY_TELEGRAM_ID") or "")

TELEGRAM_SEND_MAX = 3900

# ---- –£—Ç–∏–ª–∏—Ç—ã ----
async def read_raw_body(request: Request):
    return await request.body()

def chunk_string(text: str, size=TELEGRAM_SEND_MAX):
    return [text[i:i+size] for i in range(0, len(text), size)]

def safe_json(obj):
    try:
        return json.dumps(obj, ensure_ascii=False, indent=2)
    except Exception:
        return str(obj)

async def send_message(chat_id, text, reply_markup=None, parse_mode="Markdown"):
    body = {"chat_id": str(chat_id), "text": str(text)}
    if reply_markup:
        body["reply_markup"] = reply_markup
    if parse_mode:
        body["parse_mode"] = parse_mode
    async with httpx.AsyncClient() as client:
        try:
            await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json=body
            )
        except Exception as e:
            print("send_message error:", e)

async def answer_callback_query(callback_query_id):
    async with httpx.AsyncClient() as client:
        try:
            await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery",
                json={"callback_query_id": callback_query_id}
            )
        except Exception as e:
            print("answer_callback_query error:", e)

async def ask_gpt(prompt):
    if not OPENROUTER_API_KEY:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç OPENROUTER_API_KEY"
    try:
        async with httpx.AsyncClient() as client:
            res = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "openai/gpt-3.5-turbo",
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": 0.7
                }
            )
            data = res.json()
            if not res.status_code == 200:
                print("OpenRouter API error:", data)
                return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + str(data.get("error", {}).get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
            return data.get("choices", [{}])[0].get("message", {}).get("content", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        print("ask_gpt error:", e)
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."

# ---- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ----
async def process_game_logic(chat_id, text, first_name):
    session = sessions.get(chat_id, {})

    def update_stats(local_chat_id, game, win):
        if local_chat_id not in stats:
            stats[local_chat_id] = {}
        if game not in stats[local_chat_id]:
            stats[local_chat_id][game] = {"played": 0, "wins": 0}
        stats[local_chat_id][game]["played"] += 1
        if win:
            stats[local_chat_id][game]["wins"] += 1

    try:
        # ==== –ö–æ–Ω—Ç–∞–∫—Ç ====
        if text == "/contact":
            feed[chat_id] = True
            await send_message(chat_id, "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", {
                "keyboard": [[{"text": "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", "request_contact": True}], [{"text": "–ù–∞–∑–∞–¥"}]],
                "resize_keyboard": True,
                "one_time_keyboard": True
            })
            return

        # ==== Feedback ====
        if text == "/feedback":
            feedback_sessions[chat_id] = True
            await send_message(chat_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
            return
        if feedback_sessions.get(chat_id):
            feedback_sessions.pop(chat_id, None)
            fn = sessions.get(chat_id, {}).get("firstName")
            username = sessions.get(chat_id, {}).get("username")
            await send_message(OWNER_ID, f"üí¨ –û—Ç–∑—ã–≤ –æ—Ç {fn or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{username or '–Ω–µ—Ç'})\nID: {chat_id}\n–¢–µ–∫—Å—Ç: {text}")
            await send_message(OWNER_ID, f"/reply {chat_id}")
            await send_message(chat_id, "‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!")
            return

        # ==== /start –∏ –ù–∞–∑–∞–¥ ====
        if text in ["/start", "–ù–∞–∑–∞–¥"]:
            sessions[chat_id] = {"firstName": first_name}
            await send_message(chat_id, f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name or '–¥—Ä—É–≥'}! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞ –∏–ª–∏ –∏–≥—Ä—É:", {
                "keyboard": [
                    [{"text": "–ò—Å—Ç–æ—Ä–∏—è"}, {"text": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"}],
                    [{"text": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"}, {"text": "–ò–≥—Ä—ã üé≤"}],
                    [{"text": "/feedback"}, {"text": "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", "request_contact": True}]
                ],
                "resize_keyboard": True
            })
            return

        # ==== /stats ====
        if text == "/stats":
            user_stats = stats.get(chat_id)
            if not user_stats:
                await send_message(chat_id, "–¢—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª –Ω–∏ –≤ –æ–¥–Ω—É –∏–≥—Ä—É.")
                return
            msg = "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            for game, s in user_stats.items():
                msg += f"‚Ä¢ {game}: —Å—ã–≥—Ä–∞–Ω–æ {s['played']}, –ø–æ–±–µ–¥ {s['wins']}\n"
            await send_message(chat_id, msg)
            return

        # ==== –ò–≥—Ä—ã –º–µ–Ω—é ====
        if text == "–ò–≥—Ä—ã üé≤":
            await send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", {
                "keyboard": [
                    [{"text": "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"}, {"text": "–ù–∞–π–¥–∏ –ª–æ–∂—å"}],
                    [{"text": "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é"}, {"text": "–®–∞—Ä–∞–¥–∞"}],
                    [{"text": "–ù–∞–∑–∞–¥"}, {"text": "/stats"}]
                ],
                "resize_keyboard": True
            })
            return

        # ==== –¢–µ—Å—Ç—ã –ø–æ —Ç–µ–º–∞–º ====
        if text in ["–ò—Å—Ç–æ—Ä–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"]:
            topic = text
            prompt = f"""
–ó–∞–¥–∞–π –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–º–µ "{topic}".
–§–æ—Ä–º–∞—Ç:
–í–æ–ø—Ä–æ—Å: ...
A) ...
B) ...
C) ...
D) ...
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ... (A-D)
            """.strip()
            reply = await ask_gpt(prompt)
            match = re.search(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*([A-D])", reply, re.I)
            correct_answer = match.group(1).upper() if match else None
            if not correct_answer:
                await send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                return
            question_without_answer = re.sub(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*[A-D]", "", reply, flags=re.I).strip()
            sessions[chat_id] = {"correctAnswer": correct_answer}
            await send_message(chat_id, f"üìö –í–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ *{topic}*:\n\n{question_without_answer}", {"parse_mode": "Markdown"})
            return

        # ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç ====
        if session.get("correctAnswer"):
            user_answer = text.strip().upper()
            correct = session.pop("correctAnswer", None)
            if not correct:
                await send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏.")
                return
            if user_answer == correct:
                await send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –•–æ—á–µ—à—å –µ—â—ë –≤–æ–ø—Ä–æ—Å?", {
                    "keyboard": [
                        [{"text": "–ò—Å—Ç–æ—Ä–∏—è"}, {"text": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"}],
                        [{"text": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"}, {"text": "–ò–≥—Ä—ã üé≤"}]
                    ],
                    "resize_keyboard": True
                })
            else:
                await send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}\n–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?", {
                    "keyboard": [
                        [{"text": "–ò—Å—Ç–æ—Ä–∏—è"}, {"text": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"}],
                        [{"text": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"}, {"text": "–ò–≥—Ä—ã üé≤"}]
                    ],
                    "resize_keyboard": True
                })
            return

        # ==== –ò–≥—Ä—ã ====
        games = {
            "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ": "answer",
            "–ù–∞–π–¥–∏ –ª–æ–∂—å": "answer",
            "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é": "game",
            "–®–∞—Ä–∞–¥–∞": "answer"
        }

        if text in games:
            await handle_game_start(chat_id, text)
            return

        # ==== –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã ====
        if "game" in session or "answer" in session:
            await handle_game_answer(chat_id, text)
            return

        # ==== –§–æ–ª–ª–±–µ–∫ ====
        await send_message(chat_id, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")

    except Exception as e:
        print(f"process_game_logic error: {e}")
        await send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–ø–∏—à–∏ /start –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")



# ---- Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----
# ---- Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----
@app.post("/api/telegram")
async def telegram_webhook(request: Request):
    raw = await request.body()
    try:
        update = json.loads(raw)
    except Exception as e:
        print("Bad JSON:", e)
        return PlainTextResponse("Bad JSON", status_code=400)

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º from_id
        from_id = str(
            update.get("message", {}).get("from", {}).get("id") or
            update.get("edited_message", {}).get("from", {}).get("id") or
            update.get("callback_query", {}).get("from", {}).get("id") or
            update.get("inline_query", {}).get("from", {}).get("id") or ""
        )
        is_owner = from_id and OWNER_ID and from_id == OWNER_ID

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ callback
        msg_text = (
            update.get("message", {}).get("text") or
            update.get("edited_message", {}).get("text") or
            update.get("callback_query", {}).get("data") or
            update.get("inline_query", {}).get("query") or ""
        )

        # /reply –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if is_owner and isinstance(msg_text, str) and msg_text.startswith("/reply "):
            parts = msg_text.split(" ")
            target_id = parts[1] if len(parts) > 1 else None
            reply_text = " ".join(parts[2:]) if len(parts) > 2 else ""
            if not target_id or not reply_text:
                await send_message(OWNER_ID, "‚ö† –§–æ—Ä–º–∞—Ç: /reply <chat_id> <—Ç–µ–∫—Å—Ç>")
            else:
                await send_message(target_id, reply_text)
                await send_message(OWNER_ID, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
            return PlainTextResponse("ok")

        # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ JSON –≤–ª–∞–¥–µ–ª—å—Ü—É (–µ—Å–ª–∏ –Ω–µ –æ–Ω —Å–∞–º)
        if not is_owner and OWNER_ID:
            payload = f"üì° –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (update_id: {update.get('update_id', '‚Äî')})\nJSON:\n{safe_json(update)}"
            for chunk in chunk_string(payload):
                await send_message(OWNER_ID, f"```json\n{chunk}\n```", parse_mode="Markdown")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –±–µ–∑–æ–ø–∞—Å–Ω–æ
        chat_id = (
            update.get("message", {}).get("chat", {}).get("id") or
            update.get("edited_message", {}).get("chat", {}).get("id") or
            update.get("callback_query", {}).get("message", {}).get("chat", {}).get("id")
        )
        if chat_id is None:
            print("No chat_id in update:", safe_json(update))
            return PlainTextResponse("ok")  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–ø–¥–µ–π—Ç –±–µ–∑ chat_id

        chat_id_str = str(chat_id)

        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        first_name = (
            update.get("message", {}).get("from", {}).get("first_name") or
            update.get("edited_message", {}).get("from", {}).get("first_name") or
            update.get("callback_query", {}).get("from", {}).get("first_name") or
            ""
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact = update.get("message", {}).get("contact")
        if contact:
            phone = contact.get("phone_number", "")
            first = contact.get("first_name", "")
            user_id = contact.get("user_id", "")
            await send_message(chat_id_str, f"‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä: +{phone}")
            if OWNER_ID:
                await send_message(OWNER_ID, f"üìû –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:\n–ò–º—è: {first}\n–¢–µ–ª–µ—Ñ–æ–Ω: +{phone}\nID: {user_id}")
            return PlainTextResponse("ok")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
        if "callback_query" in update:
            cqid = update["callback_query"].get("id")
            if cqid:
                await answer_callback_query(cqid)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–≥—Ä —Å –∑–∞—â–∏—Ç–æ–π try/except
        text = msg_text or ""
        try:
            await process_game_logic(chat_id_str, str(text), first_name)
        except Exception as e:
            print("process_game_logic error:", e)
            await send_message(OWNER_ID, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{text}\n–û—à–∏–±–∫–∞: {e}")

        return PlainTextResponse("ok")

    except Exception as e_outer:
        print("Unexpected webhook error:", e_outer)
        if OWNER_ID:
            await send_message(OWNER_ID, f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ webhook:\n{e_outer}")
        return PlainTextResponse("ok")

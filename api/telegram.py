import os
import json
import re
import httpx
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse

app = FastAPI()

# --- –í –ø–∞–º—è—Ç–∏ ---
sessions = {}
feed = {}
stats = {}
feedback_sessions = {}

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY") or ""
OWNER_ID = str(os.getenv("MY_TELEGRAM_ID") or "")

# –õ–∏–º–∏—Ç Telegram (~4096)
TELEGRAM_SEND_MAX = 3900

# ---- –£—Ç–∏–ª–∏—Ç—ã ----
async def read_raw_body(req: Request):
    return await req.body()

def chunk_string(s, size=TELEGRAM_SEND_MAX):
    return [s[i:i+size] for i in range(0, len(s), size)]

def safe_json(obj):
    try:
        return json.dumps(obj, indent=2, ensure_ascii=False)
    except:
        return str(obj)

# ---- sendMessage wrapper ----
async def send_message(chat_id, text, reply_markup=None, parse_mode="Markdown"):
    body = {"chat_id": str(chat_id), "text": str(text)}
    if reply_markup:
        body["reply_markup"] = reply_markup
    if parse_mode:
        body["parse_mode"] = parse_mode
    try:
        async with httpx.AsyncClient() as client:
            r = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                headers={"Content-Type": "application/json"},
                content=json.dumps(body)
            )
        return r
    except Exception as e:
        print("send_message error:", e)
        raise e

async def answer_callback_query(callback_query_id):
    try:
        async with httpx.AsyncClient() as client:
            await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery",
                headers={"Content-Type": "application/json"},
                content=json.dumps({"callback_query_id": callback_query_id})
            )
    except Exception as e:
        print("answer_callback_query error:", e)

# ---- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä ----
def update_stats(chat_id, game, win):
    if chat_id not in stats:
        stats[chat_id] = {}
    if game not in stats[chat_id]:
        stats[chat_id][game] = {"played": 0, "wins": 0}
    stats[chat_id][game]["played"] += 1
    if win:
        stats[chat_id][game]["wins"] += 1

# ---- ask_gpt —á–µ—Ä–µ–∑ OpenRouter ----
async def ask_gpt(prompt):
    if not OPENROUTER_API_KEY:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç OPENROUTER_API_KEY"
    try:
        async with httpx.AsyncClient() as client:
            res = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "openai/gpt-3.5-turbo",
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": 0.7
                }
            )
            data = res.json()
            if not res.status_code == 200:
                print("OpenRouter API error:", data)
                return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + (data.get("error", {}).get("message") or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            return data.get("choices", [{}])[0].get("message", {}).get("content", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        print("ask_gpt error:", e)
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."

# ---- –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏ –º–µ–Ω—é ----
async def process_game_logic(chat_id, text, first_name):
    session = sessions.get(chat_id, {})

    def update_local_stats(game, win):
        update_stats(chat_id, game, win)

    # === –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ ===
    if text == "/contact":
        feed[chat_id] = True
        await send_message(chat_id, "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", {
            "keyboard": [
                [{"text": "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", "request_contact": True}],
                [{"text": "/start"}]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": True
        })
        return

    # === Feedback –∫–Ω–æ–ø–∫–∞ ===
    if text == "/feedback":
        feedback_sessions[chat_id] = True
        await send_message(chat_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
        return

    # –ü—Ä–∏—ë–º –æ—Ç–∑—ã–≤–∞
    if feedback_sessions.get(chat_id):
        feedback_sessions.pop(chat_id)
        user_data = sessions.get(chat_id, {})
        await send_message(
            OWNER_ID,
            f"üí¨ –û—Ç–∑—ã–≤ –æ—Ç {user_data.get('firstName', '–ë–µ–∑ –∏–º–µ–Ω–∏')} (@{user_data.get('username', '–Ω–µ—Ç')})\nID: {chat_id}\n–¢–µ–∫—Å—Ç: {text}"
        )
        await send_message(OWNER_ID, f"/reply {chat_id}")
        await send_message(chat_id, "‚úÖ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è!")
        return

    # /start
    if text == "/start":
        sessions[chat_id] = {"firstName": first_name}
        await send_message(chat_id, f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name or '–¥—Ä—É–≥'}! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞ –∏–ª–∏ –∏–≥—Ä—É:", {
            "keyboard": [
                [{"text": "–ò—Å—Ç–æ—Ä–∏—è"}, {"text": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"}],
                [{"text": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"}, {"text": "–ò–≥—Ä—ã üé≤"}],
                [{"text": "/feedback"}, {"text": "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", "request_contact": True}],
            ],
            "resize_keyboard": True
        })
        return

    if text == "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º":
        await send_message(chat_id, "–ü–æ–ª—É—á–µ–Ω")
        return

    # /stats
    if text == "/stats":
        user_stats = stats.get(chat_id)
        if not user_stats:
            await send_message(chat_id, "–¢—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª –Ω–∏ –≤ –æ–¥–Ω—É –∏–≥—Ä—É.")
            return
        msg = "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        for game, s in user_stats.items():
            msg += f"‚Ä¢ {game}: —Å—ã–≥—Ä–∞–Ω–æ {s['played']}, –ø–æ–±–µ–¥ {s['wins']}\n"
        await send_message(chat_id, msg)
        return

    # –ò–≥—Ä—ã –º–µ–Ω—é
    if text == "–ò–≥—Ä—ã üé≤":
        await send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", {
            "keyboard": [
                [{"text": "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"}, {"text": "–ù–∞–π–¥–∏ –ª–æ–∂—å"}],
                [{"text": "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é"}, {"text": "–®–∞—Ä–∞–¥–∞"}],
                [{"text": "/start"}, {"text": "/stats"}]
            ],
            "resize_keyboard": True
        })
        return

    # ===== –ó–¥–µ—Å—å –¥–∞–ª–µ–µ –≤—Å—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞, –∫–∞–∫ –≤ JS-–∫–æ–¥–µ =====
    # –ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ, –Ω–∞–π–¥–∏ –ª–æ–∂—å, –ø—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é, —à–∞—Ä–∞–¥–∞
    # (–≤—Å—Ç–∞–≤—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫ process_game_logic –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    # –î–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤ —è –æ—Å—Ç–∞–≤–ª—è—é –∑–¥–µ—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤—Å—Ç–∞–≤—å –≤–µ—Å—å –±–ª–æ–∫.

# ---- Webhook ----
@app.post("/api/webhook")
async def telegram_webhook(req: Request):
    raw = await read_raw_body(req)
    try:
        update = json.loads(raw.decode())
    except Exception as e:
        print("Bad JSON:", e)
        return PlainTextResponse("Bad JSON", status_code=400)

    print("üì© –ü–æ–ª—É—á–µ–Ω update:", update.get("update_id"))

    # –ü–æ–ª—É—á–∞–µ–º fromId –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    from_id = str(
        update.get("message", {}).get("from", {}).get("id") or
        update.get("edited_message", {}).get("from", {}).get("id") or
        update.get("callback_query", {}).get("from", {}).get("id") or
        update.get("inline_query", {}).get("from", {}).get("id") or ""
    )
    is_owner = from_id == OWNER_ID

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    msg_text = (
        update.get("message", {}).get("text") or
        update.get("edited_message", {}).get("text") or
        update.get("callback_query", {}).get("data") or
        update.get("inline_query", {}).get("query") or ""
    )

    # /reply –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if is_owner and isinstance(msg_text, str) and msg_text.startswith("/reply "):
        parts = msg_text.split(" ")
        target_id = parts[1] if len(parts) > 1 else None
        reply_text = " ".join(parts[2:]) if len(parts) > 2 else None
        if not target_id or not reply_text:
            await send_message(OWNER_ID, "‚ö† –§–æ—Ä–º–∞—Ç: /reply <chat_id> <—Ç–µ–∫—Å—Ç>")
        else:
            await send_message(target_id, reply_text)
            await send_message(OWNER_ID, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        return PlainTextResponse("ok")

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ JSON –∞–ø–¥–µ–π—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É
    if not is_owner and OWNER_ID:
        payload = f"üì° –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (update_id: {update.get('update_id', '‚Äî')})\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–ø–¥–µ–π—Ç–∞ (JSON):\n{safe_json(update)}"
        for chunk in chunk_string(payload, TELEGRAM_SEND_MAX):
            await send_message(OWNER_ID, f"```json\n{chunk}\n```", parse_mode="Markdown")

    # –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
    chat_id = (
        update.get("message", {}).get("chat", {}).get("id") or
        update.get("edited_message", {}).get("chat", {}).get("id") or
        update.get("callback_query", {}).get("message", {}).get("chat", {}).get("id")
    )

    if update.get("callback_query"):
        cqid = update["callback_query"]["id"]
        await answer_callback_query(cqid)

    if chat_id:
        chat_id_str = str(chat_id)
        first_name = (
            update.get("message", {}).get("from", {}).get("first_name") or
            update.get("edited_message", {}).get("from", {}).get("first_name") or
            update.get("callback_query", {}).get("from", {}).get("first_name") or ""
        )

        # –ö–æ–Ω—Ç–∞–∫—Ç
        if update.get("message", {}).get("contact"):
            contact = update["message"]["contact"]
            await send_message(chat_id_str, f"‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä: +{contact.get('phone_number')}")
            await send_message(
                OWNER_ID,
                f"üìû –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:\n–ò–º—è: {contact.get('first_name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: +{contact.get('phone_number')}\nID: {contact.get('user_id')}"
            )
            return PlainTextResponse("ok")

        # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—Å—Ç –≤ –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
        text = (
            update.get("message", {}).get("text") or
            update.get("edited_message", {}).get("text") or
            update.get("callback_query", {}).get("data") or ""
        )
        await process_game_logic(chat_id_str, str(text), first_name)

    return PlainTextResponse("ok")

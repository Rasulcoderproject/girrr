import os
import json
import httpx
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse

app = FastAPI()

# --- –í –ø–∞–º—è—Ç–∏ ---
sessions = {}
feed = {}
stats = {}
feedback_sessions = {}

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "")
OWNER_ID = str(os.getenv("MY_TELEGRAM_ID", ""))

# –õ–∏–º–∏—Ç Telegram (~4096)
TELEGRAM_SEND_MAX = 3900

# ---- –£—Ç–∏–ª–∏—Ç—ã ----
async def read_raw_body(req: Request):
    return await req.body()

def chunk_string(s: str, size=TELEGRAM_SEND_MAX):
    return [s[i:i + size] for i in range(0, len(s), size)]

def safe_json(obj):
    try:
        return json.dumps(obj, indent=2, ensure_ascii=False)
    except Exception:
        return str(obj)

# ---- Telegram API ----
async def send_message(chat_id, text, reply_markup=None, parse_mode="Markdown"):
    payload = {"chat_id": str(chat_id), "text": str(text)}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    if parse_mode:
        payload["parse_mode"] = parse_mode
    async with httpx.AsyncClient() as client:
        try:
            r = await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
                json=payload,
            )
            return r
        except Exception as e:
            print("send_message error:", e)

async def answer_callback_query(callback_query_id):
    async with httpx.AsyncClient() as client:
        try:
            await client.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery",
                json={"callback_query_id": callback_query_id},
            )
        except Exception as e:
            print("answer_callback_query error:", e)

# ---- OpenRouter GPT ----
async def ask_gpt(prompt):
    if not OPENROUTER_API_KEY:
        return "–û—à–∏–±–∫–∞: –Ω–µ—Ç OPENROUTER_API_KEY"
    try:
        async with httpx.AsyncClient() as client:
            res = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json",
                },
                json={
                    "model": "openai/gpt-3.5-turbo",
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": 0.7,
                },
            )
            data = res.json()
            if not res.is_success:
                print("OpenRouter API error:", data)
                return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
            return data.get("choices", [{}])[0].get("message", {}).get("content", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        print("ask_gpt error:", e)
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."

# ---- –û—Å–Ω–æ–≤–Ω–æ–π webhook ----
@app.post("/api/telegram")
async def telegram_webhook(req: Request):
    raw = await read_raw_body(req)
    try:
        update = json.loads(raw)
    except Exception as e:
        print("Bad JSON:", e)
        return PlainTextResponse("Bad JSON", status_code=400)

    print("üì© –ü–æ–ª—É—á–µ–Ω update:", update.get("update_id"))

    # ---- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----
    from_id = str(
        update.get("message", {}).get("from", {}).get("id")
        or update.get("edited_message", {}).get("from", {}).get("id")
        or update.get("callback_query", {}).get("from", {}).get("id")
        or update.get("inline_query", {}).get("from", {}).get("id")
        or ""
    )
    is_owner = from_id and OWNER_ID and from_id == OWNER_ID

    msg_text = (
        update.get("message", {}).get("text")
        or update.get("edited_message", {}).get("text")
        or update.get("callback_query", {}).get("data")
        or update.get("inline_query", {}).get("query")
        or ""
    )

    # ---- /reply –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ ----
    if is_owner and isinstance(msg_text, str) and msg_text.startswith("/reply "):
        parts = msg_text.split(" ")
        target_id = parts[1] if len(parts) > 1 else None
        reply_text = " ".join(parts[2:]) if len(parts) > 2 else None
        if not target_id or not reply_text:
            await send_message(OWNER_ID, "‚ö† –§–æ—Ä–º–∞—Ç: /reply <chat_id> <—Ç–µ–∫—Å—Ç>")
        else:
            await send_message(target_id, reply_text)
            await send_message(OWNER_ID, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        return PlainTextResponse("ok")

    # ---- –ü–µ—Ä–µ—Å—ã–ª–∫–∞ JSON –∞–ø–¥–µ–π—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É ----
    if not is_owner and OWNER_ID:
        header = f"üì° –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (update_id: {update.get('update_id', '‚Äî')})\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–ø–¥–µ–π—Ç–∞ (JSON):\n"
        body = safe_json(update)
        payload = header + body
        for chunk in chunk_string(payload):
            await send_message(OWNER_ID, f"```json\n{chunk}\n```", parse_mode="Markdown")

    # ---- –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id ----
    chat_id = (
        update.get("message", {}).get("chat", {}).get("id")
        or update.get("edited_message", {}).get("chat", {}).get("id")
        or update.get("callback_query", {}).get("message", {}).get("chat", {}).get("id")
        or None
    )

    if update.get("callback_query"):
        await answer_callback_query(update["callback_query"]["id"])

    if chat_id:
        chat_id_str = str(chat_id)
        first_name = (
            update.get("message", {}).get("from", {}).get("first_name")
            or update.get("edited_message", {}).get("from", {}).get("first_name")
            or update.get("callback_query", {}).get("from", {}).get("first_name")
            or ""
        )

        # ---- –ö–æ–Ω—Ç–∞–∫—Ç ----
        if update.get("message", {}).get("contact"):
            contact = update["message"]["contact"]
            await send_message(chat_id_str, f"‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–π –Ω–æ–º–µ—Ä: +{contact['phone_number']}")
            await send_message(
                OWNER_ID,
                f"üìû –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:\n–ò–º—è: {contact.get('first_name')}\n–¢–µ–ª–µ—Ñ–æ–Ω: +{contact.get('phone_number')}\nID: {contact.get('user_id')}"
            )
            return PlainTextResponse("ok")

        text = (
            update.get("message", {}).get("text")
            or update.get("edited_message", {}).get("text")
            or update.get("callback_query", {}).get("data")
            or ""
        )

        try:
            await process_game_logic(chat_id_str, text, first_name)
        except Exception as e:
            print("process_game_logic error:", e)

    return PlainTextResponse("ok")

# ---- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ----
async def process_game_logic(chat_id, text, first_name):
    def update_stats(local_chat_id, game, win):
        stats.setdefault(local_chat_id, {})
        stats[local_chat_id].setdefault(game, {"played": 0, "wins": 0})
        stats[local_chat_id][game]["played"] += 1
        if win:
            stats[local_chat_id][game]["wins"] += 1

    # --- /start ---
    if text == "/start":
        sessions[chat_id] = {"firstName": first_name}
        await send_message(chat_id, f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name or '–¥—Ä—É–≥'}! –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∞ –∏–ª–∏ –∏–≥—Ä—É:", {
            "keyboard": [
                [{"text": "–ò—Å—Ç–æ—Ä–∏—è"}, {"text": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"}],
                [{"text": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"}, {"text": "–ò–≥—Ä—ã üé≤"}],
                [{"text": "/feedback"}, {"text": "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", "request_contact": True}]
            ],
            "resize_keyboard": True
        })
        return

    # --- –ò–≥—Ä—ã –º–µ–Ω—é ---
    if text == "–ò–≥—Ä—ã üé≤":
        await send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", {
            "keyboard": [
                [{"text": "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"}, {"text": "–ù–∞–π–¥–∏ –ª–æ–∂—å"}],
                [{"text": "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é"}, {"text": "–®–∞—Ä–∞–¥–∞"}],
                [{"text": "/start"}, {"text": "/stats"}]
            ],
            "resize_keyboard": True
        })
        return

    # ===== –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ =====
    if text == "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ":
        prompt = """
–ó–∞–≥–∞–¥–∞–π –æ–¥–Ω–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç–∏–≥—Ä, —Å–∞–º–æ–ª—ë—Ç, –ª–∞–º–ø–∞ –∏ —Ç.–¥.). –û–ø–∏—à–∏ –µ–≥–æ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–≥–∞–¥–∞—Ç—å, —á—Ç–æ —ç—Ç–æ. –ù–µ –Ω–∞–∑—ã–≤–∞–π —Å–∞–º–æ —Å–ª–æ–≤–æ. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å: "–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ..." (–Ω–æ —ç—Ç–æ —Å–∫—Ä–æ–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
–§–æ—Ä–º–∞—Ç:
–û–ø–∏—Å–∞–Ω–∏–µ: ...
–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: ...
        """.strip()
        reply = await ask_gpt(prompt)
        import re
        match = re.search(r"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:\s*(.+)", reply, re.IGNORECASE)
        hidden_word = match.group(1).upper() if match else None
        description = re.sub(r"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:\s*.+", "", reply, flags=re.IGNORECASE).replace("–û–ø–∏—Å–∞–Ω–∏–µ:", "").strip()
        if not hidden_word:
            await send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
            return
        sessions[chat_id] = {"game": "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ", "answer": hidden_word}
        await send_message(chat_id, f"üß† –£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ:\n\n{description}")
        return

    if sessions.get(chat_id, {}).get("game") == "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ":
        user_guess = text.strip().upper()
        correct_answer = sessions[chat_id]["answer"]
        del sessions[chat_id]
        win = user_guess == correct_answer
        update_stats(chat_id, "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ", win)
        reply_text = f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë?" if win else f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ: {correct_answer}\n–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?"
        await send_message(chat_id, reply_text, {
            "keyboard": [[{"text": "–ò–≥—Ä—ã üé≤"}], [{"text": "/start"}]],
            "resize_keyboard": True
        })
        return

    # ===== –ù–∞–π–¥–∏ –ª–æ–∂—å =====
    if text == "–ù–∞–π–¥–∏ –ª–æ–∂—å":
        prompt = """
–ü—Ä–∏–¥—É–º–∞–π —Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã. –î–≤–∞ –∏–∑ –Ω–∏—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–¥–æ–π, –æ–¥–Ω–æ ‚Äî –ª–æ–∂—å—é. –í –∫–æ–Ω—Ü–µ —É–∫–∞–∂–∏, –∫–∞–∫–æ–µ –∏–∑ –Ω–∏—Ö –ª–æ–∂—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–õ–æ–∂—å: ‚Ññ2").
–§–æ—Ä–º–∞—Ç:
1. ...
2. ...
3. ...
–õ–æ–∂—å: ‚Ññ...
        """.strip()
        reply = await ask_gpt(prompt)
        match = re.search(r"–õ–æ–∂—å:\s*‚Ññ?([1-3])", reply, re.IGNORECASE)
        false_index = match.group(1) if match else None
        if not false_index:
            await send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
            return
        statement_text = re.sub(r"–õ–æ–∂—å:\s*‚Ññ?[1-3]", "", reply, flags=re.IGNORECASE).strip()
        sessions[chat_id] = {"game": "–ù–∞–π–¥–∏ –ª–æ–∂—å", "answer": false_index}
        await send_message(chat_id, f"üïµÔ∏è –ù–∞–π–¥–∏ –ª–æ–∂—å:\n\n{statement_text}\n\n–û—Ç–≤–µ—Ç –≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–æ–π (1, 2 –∏–ª–∏ 3).")
        return

    if sessions.get(chat_id, {}).get("game") == "–ù–∞–π–¥–∏ –ª–æ–∂—å":
        guess = text.strip()
        correct = sessions[chat_id]["answer"]
        del sessions[chat_id]
        win = guess == correct
        update_stats(chat_id, "–ù–∞–π–¥–∏ –ª–æ–∂—å", win)
        reply_text = "üéâ –í–µ—Ä–Ω–æ! –¢—ã –Ω–∞—à—ë–ª –ª–æ–∂—å!" if win else f"‚ùå –ù–µ—Ç, –ª–æ–∂—å –±—ã–ª–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {correct}. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?"
        await send_message(chat_id, reply_text, {
            "keyboard": [[{"text": "–ò–≥—Ä—ã üé≤"}], [{"text": "/start"}]],
            "resize_keyboard": True
        })
        return

    # ===== –ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é =====
    if text == "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é":
        prompt = """
–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Ç—Ä–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è. –í–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–Ω—É–º–µ—Ä—É–π.
–§–æ—Ä–º–∞—Ç:
–ù–∞—á–∞–ª–æ: ...
1. ...
2. ...
3. ...
        """.strip()
        reply = await ask_gpt(prompt)
        match = re.search(r"–ù–∞—á–∞–ª–æ:\s*(.+?)(?:\n|$)", reply, re.IGNORECASE)
        intro = match.group(1).strip() if match else None
        if not intro:
            await send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
            return
        sessions[chat_id] = {"game": "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é", "story": reply}
        await send_message(chat_id, f"üìñ –ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é:\n\n{reply}\n\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (1, 2 –∏–ª–∏ 3).")
        return

    if sessions.get(chat_id, {}).get("game") == "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é":
        choice = text.strip()
        win = choice in ["1", "2", "3"]
        del sessions[chat_id]
        update_stats(chat_id, "–ü—Ä–æ–¥–æ–ª–∂–∏ –∏—Å—Ç–æ—Ä–∏—é", win)
        reply_text = "üéâ –ö–ª–∞—Å—Å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ!" if win else "‚ùå –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."
        await send_message(chat_id, reply_text, {
            "keyboard": [[{"text": "–ò–≥—Ä—ã üé≤"}], [{"text": "/start"}]],
            "resize_keyboard": True
        })
        return

    # ===== –®–∞—Ä–∞–¥–∞ =====
    if text == "–®–∞—Ä–∞–¥–∞":
        prompt = """
–ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É —à–∞—Ä–∞–¥—É (–∑–∞–≥–∞–¥–∫—É), –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π, –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –¥–∞—ë—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ. –í –∫–æ–Ω—Ü–µ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç.
–§–æ—Ä–º–∞—Ç:
1) ...
2) ...
3) ...
–û—Ç–≤–µ—Ç: ...
        """.strip()
        reply = await ask_gpt(prompt)
        match = re.search(r"–û—Ç–≤–µ—Ç:\s*(.+)", reply, re.IGNORECASE)
        answer = match.group(1).upper() if match else None
        if not answer:
            await send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–∞—Ä–∞–¥—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
            return
        riddle_text = re.sub(r"–û—Ç–≤–µ—Ç:\s*.+", "", reply, flags=re.IGNORECASE).strip()
        sessions[chat_id] = {"game": "–®–∞—Ä–∞–¥–∞", "answer": answer}
        await send_message(chat_id, f"üß© –®–∞—Ä–∞–¥–∞:\n\n{riddle_text}\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.")
        return

    if sessions.get(chat_id, {}).get("game") == "–®–∞—Ä–∞–¥–∞":
        guess = text.strip().upper()
        correct = sessions[chat_id]["answer"]
        del sessions[chat_id]
        win = guess == correct
        update_stats(chat_id, "–®–∞—Ä–∞–¥–∞", win)
        reply_text = "üéâ –ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª!" if win else f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}. –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë?"
        await send_message(chat_id, reply_text, {
            "keyboard": [[{"text": "–ò–≥—Ä—ã üé≤"}], [{"text": "/start"}]],
            "resize_keyboard": True
        })
        return

    # --- –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ---
    await send_message(chat_id, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")
